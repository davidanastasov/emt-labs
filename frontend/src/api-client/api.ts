/* tslint:disable */
/* eslint-disable */
/**
 * Library API
 * API documentation for the book Library API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthorCountsPerCountryDTO
 */
export interface AuthorCountsPerCountryDTO {
    /**
     * 
     * @type {number}
     * @memberof AuthorCountsPerCountryDTO
     */
    'countryId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorCountsPerCountryDTO
     */
    'numAuthors'?: number;
}
/**
 * 
 * @export
 * @interface AuthorDTO
 */
export interface AuthorDTO {
    /**
     * 
     * @type {number}
     * @memberof AuthorDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorDTO
     */
    'surname'?: string;
    /**
     * 
     * @type {CountryDTO}
     * @memberof AuthorDTO
     */
    'country'?: CountryDTO;
}
/**
 * 
 * @export
 * @interface AuthorNameDTO
 */
export interface AuthorNameDTO {
    /**
     * 
     * @type {string}
     * @memberof AuthorNameDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorNameDTO
     */
    'surname'?: string;
}
/**
 * 
 * @export
 * @interface BookCountsPerAuthorDTO
 */
export interface BookCountsPerAuthorDTO {
    /**
     * 
     * @type {number}
     * @memberof BookCountsPerAuthorDTO
     */
    'authorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookCountsPerAuthorDTO
     */
    'numBooks'?: number;
}
/**
 * 
 * @export
 * @interface BookDTO
 */
export interface BookDTO {
    /**
     * 
     * @type {number}
     * @memberof BookDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDTO
     */
    'category'?: BookDTOCategoryEnum;
    /**
     * 
     * @type {AuthorDTO}
     * @memberof BookDTO
     */
    'author'?: AuthorDTO;
    /**
     * 
     * @type {number}
     * @memberof BookDTO
     */
    'availableCopies'?: number;
}

export const BookDTOCategoryEnum = {
    Novel: 'NOVEL',
    Thriller: 'THRILLER',
    History: 'HISTORY',
    Fantasy: 'FANTASY',
    Biography: 'BIOGRAPHY',
    Classics: 'CLASSICS',
    Drama: 'DRAMA'
} as const;

export type BookDTOCategoryEnum = typeof BookDTOCategoryEnum[keyof typeof BookDTOCategoryEnum];

/**
 * 
 * @export
 * @interface BookRentalDTO
 */
export interface BookRentalDTO {
    /**
     * 
     * @type {number}
     * @memberof BookRentalDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookRentalDTO
     */
    'username'?: string;
    /**
     * 
     * @type {BookDTO}
     * @memberof BookRentalDTO
     */
    'book'?: BookDTO;
}
/**
 * 
 * @export
 * @interface CountryDTO
 */
export interface CountryDTO {
    /**
     * 
     * @type {number}
     * @memberof CountryDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CountryDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryDTO
     */
    'continent'?: CountryDTOContinentEnum;
}

export const CountryDTOContinentEnum = {
    Europe: 'EUROPE',
    Asia: 'ASIA',
    Africa: 'AFRICA',
    SouthAmerica: 'SOUTH_AMERICA',
    NorthAmerica: 'NORTH_AMERICA',
    Australia: 'AUSTRALIA',
    Antarctica: 'ANTARCTICA'
} as const;

export type CountryDTOContinentEnum = typeof CountryDTOContinentEnum[keyof typeof CountryDTOContinentEnum];

/**
 * 
 * @export
 * @interface CreateAuthorDTO
 */
export interface CreateAuthorDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateAuthorDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAuthorDTO
     */
    'surname'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateAuthorDTO
     */
    'countryId'?: number;
}
/**
 * 
 * @export
 * @interface CreateBookDTO
 */
export interface CreateBookDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateBookDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookDTO
     */
    'category'?: CreateBookDTOCategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateBookDTO
     */
    'authorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBookDTO
     */
    'availableCopies'?: number;
}

export const CreateBookDTOCategoryEnum = {
    Novel: 'NOVEL',
    Thriller: 'THRILLER',
    History: 'HISTORY',
    Fantasy: 'FANTASY',
    Biography: 'BIOGRAPHY',
    Classics: 'CLASSICS',
    Drama: 'DRAMA'
} as const;

export type CreateBookDTOCategoryEnum = typeof CreateBookDTOCategoryEnum[keyof typeof CreateBookDTOCategoryEnum];

/**
 * 
 * @export
 * @interface CreateCountryDTO
 */
export interface CreateCountryDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateCountryDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCountryDTO
     */
    'continent'?: CreateCountryDTOContinentEnum;
}

export const CreateCountryDTOContinentEnum = {
    Europe: 'EUROPE',
    Asia: 'ASIA',
    Africa: 'AFRICA',
    SouthAmerica: 'SOUTH_AMERICA',
    NorthAmerica: 'NORTH_AMERICA',
    Australia: 'AUSTRALIA',
    Antarctica: 'ANTARCTICA'
} as const;

export type CreateCountryDTOContinentEnum = typeof CreateCountryDTOContinentEnum[keyof typeof CreateCountryDTOContinentEnum];

/**
 * 
 * @export
 * @interface CreateUserDTO
 */
export interface CreateUserDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'role'?: CreateUserDTORoleEnum;
}

export const CreateUserDTORoleEnum = {
    Admin: 'ADMIN',
    Librarian: 'LIBRARIAN',
    User: 'USER'
} as const;

export type CreateUserDTORoleEnum = typeof CreateUserDTORoleEnum[keyof typeof CreateUserDTORoleEnum];

/**
 * 
 * @export
 * @interface LoginResponseDTO
 */
export interface LoginResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface LoginUserDTO
 */
export interface LoginUserDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UpdateAuthorDTO
 */
export interface UpdateAuthorDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateAuthorDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAuthorDTO
     */
    'surname'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateAuthorDTO
     */
    'countryId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateBookDTO
 */
export interface UpdateBookDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBookDTO
     */
    'category'?: UpdateBookDTOCategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDTO
     */
    'authorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateBookDTO
     */
    'availableCopies'?: number;
}

export const UpdateBookDTOCategoryEnum = {
    Novel: 'NOVEL',
    Thriller: 'THRILLER',
    History: 'HISTORY',
    Fantasy: 'FANTASY',
    Biography: 'BIOGRAPHY',
    Classics: 'CLASSICS',
    Drama: 'DRAMA'
} as const;

export type UpdateBookDTOCategoryEnum = typeof UpdateBookDTOCategoryEnum[keyof typeof UpdateBookDTOCategoryEnum];

/**
 * 
 * @export
 * @interface UpdateCountryDTO
 */
export interface UpdateCountryDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryDTO
     */
    'continent'?: UpdateCountryDTOContinentEnum;
}

export const UpdateCountryDTOContinentEnum = {
    Europe: 'EUROPE',
    Asia: 'ASIA',
    Africa: 'AFRICA',
    SouthAmerica: 'SOUTH_AMERICA',
    NorthAmerica: 'NORTH_AMERICA',
    Australia: 'AUSTRALIA',
    Antarctica: 'ANTARCTICA'
} as const;

export type UpdateCountryDTOContinentEnum = typeof UpdateCountryDTOContinentEnum[keyof typeof UpdateCountryDTOContinentEnum];

/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'role'?: UserDTORoleEnum;
}

export const UserDTORoleEnum = {
    Admin: 'ADMIN',
    Librarian: 'LIBRARIAN',
    User: 'USER'
} as const;

export type UserDTORoleEnum = typeof UserDTORoleEnum[keyof typeof UserDTORoleEnum];

/**
 * 
 * @export
 * @interface WishlistDTO
 */
export interface WishlistDTO {
    /**
     * 
     * @type {number}
     * @memberof WishlistDTO
     */
    'id'?: number;
    /**
     * 
     * @type {UserDTO}
     * @memberof WishlistDTO
     */
    'user'?: UserDTO;
    /**
     * 
     * @type {Array<BookDTO>}
     * @memberof WishlistDTO
     */
    'books'?: Array<BookDTO>;
}

/**
 * AuthorManagementApi - axios parameter creator
 * @export
 */
export const AuthorManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes an author from the database
         * @summary Delete an author by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAuthorById', 'id', id)
            const localVarPath = `/api/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all authors
         * @summary Get all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthors: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches an author by their unique ID
         * @summary Get an author by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAuthorById', 'id', id)
            const localVarPath = `/api/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list showing the number of authors grouped by their country.
         * @summary Get author counts per country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorCountsPerCountry: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authors/by-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all authors\' names.
         * @summary Get all author names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorNames: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authors/names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves a new author to the database
         * @summary Create a new author
         * @param {CreateAuthorDTO} createAuthorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAuthor: async (createAuthorDTO: CreateAuthorDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAuthorDTO' is not null or undefined
            assertParamExists('saveAuthor', 'createAuthorDTO', createAuthorDTO)
            const localVarPath = `/api/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuthorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an author\'s details
         * @summary Update an existing author
         * @param {number} id 
         * @param {UpdateAuthorDTO} updateAuthorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthor: async (id: number, updateAuthorDTO: UpdateAuthorDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAuthor', 'id', id)
            // verify required parameter 'updateAuthorDTO' is not null or undefined
            assertParamExists('updateAuthor', 'updateAuthorDTO', updateAuthorDTO)
            const localVarPath = `/api/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAuthorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorManagementApi - functional programming interface
 * @export
 */
export const AuthorManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes an author from the database
         * @summary Delete an author by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.deleteAuthorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all authors
         * @summary Get all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAuthors(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAuthors(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.getAllAuthors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches an author by their unique ID
         * @summary Get an author by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.getAuthorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list showing the number of authors grouped by their country.
         * @summary Get author counts per country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorCountsPerCountry(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorCountsPerCountryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorCountsPerCountry(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.getAuthorCountsPerCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all authors\' names.
         * @summary Get all author names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorNames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorNameDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorNames(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.getAuthorNames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves a new author to the database
         * @summary Create a new author
         * @param {CreateAuthorDTO} createAuthorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAuthor(createAuthorDTO: CreateAuthorDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAuthor(createAuthorDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.saveAuthor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an author\'s details
         * @summary Update an existing author
         * @param {number} id 
         * @param {UpdateAuthorDTO} updateAuthorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthor(id: number, updateAuthorDTO: UpdateAuthorDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthor(id, updateAuthorDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorManagementApi.updateAuthor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorManagementApi - factory interface
 * @export
 */
export const AuthorManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorManagementApiFp(configuration)
    return {
        /**
         * Removes an author from the database
         * @summary Delete an author by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAuthorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all authors
         * @summary Get all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthors(options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorDTO>> {
            return localVarFp.getAllAuthors(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches an author by their unique ID
         * @summary Get an author by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AuthorDTO> {
            return localVarFp.getAuthorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list showing the number of authors grouped by their country.
         * @summary Get author counts per country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorCountsPerCountry(options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorCountsPerCountryDTO>> {
            return localVarFp.getAuthorCountsPerCountry(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all authors\' names.
         * @summary Get all author names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorNames(options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorNameDTO>> {
            return localVarFp.getAuthorNames(options).then((request) => request(axios, basePath));
        },
        /**
         * Saves a new author to the database
         * @summary Create a new author
         * @param {CreateAuthorDTO} createAuthorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAuthor(createAuthorDTO: CreateAuthorDTO, options?: RawAxiosRequestConfig): AxiosPromise<AuthorDTO> {
            return localVarFp.saveAuthor(createAuthorDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an author\'s details
         * @summary Update an existing author
         * @param {number} id 
         * @param {UpdateAuthorDTO} updateAuthorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthor(id: number, updateAuthorDTO: UpdateAuthorDTO, options?: RawAxiosRequestConfig): AxiosPromise<AuthorDTO> {
            return localVarFp.updateAuthor(id, updateAuthorDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorManagementApi - object-oriented interface
 * @export
 * @class AuthorManagementApi
 * @extends {BaseAPI}
 */
export class AuthorManagementApi extends BaseAPI {
    /**
     * Removes an author from the database
     * @summary Delete an author by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public deleteAuthorById(id: number, options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).deleteAuthorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all authors
     * @summary Get all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public getAllAuthors(options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).getAllAuthors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches an author by their unique ID
     * @summary Get an author by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public getAuthorById(id: number, options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).getAuthorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list showing the number of authors grouped by their country.
     * @summary Get author counts per country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public getAuthorCountsPerCountry(options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).getAuthorCountsPerCountry(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all authors\' names.
     * @summary Get all author names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public getAuthorNames(options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).getAuthorNames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves a new author to the database
     * @summary Create a new author
     * @param {CreateAuthorDTO} createAuthorDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public saveAuthor(createAuthorDTO: CreateAuthorDTO, options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).saveAuthor(createAuthorDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an author\'s details
     * @summary Update an existing author
     * @param {number} id 
     * @param {UpdateAuthorDTO} updateAuthorDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorManagementApi
     */
    public updateAuthor(id: number, updateAuthorDTO: UpdateAuthorDTO, options?: RawAxiosRequestConfig) {
        return AuthorManagementApiFp(this.configuration).updateAuthor(id, updateAuthorDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookManagementApi - axios parameter creator
 * @export
 */
export const BookManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes a book from the database
         * @summary Delete a book by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBookById', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all the rentals for a given book.
         * @summary Get all book rentals by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRentalsById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findAllRentalsById', 'id', id)
            const localVarPath = `/api/books/{id}/rentals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of books associated with a specific country ID
         * @summary Get books by country ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBooksByCountryId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findBooksByCountryId', 'id', id)
            const localVarPath = `/api/books/by-country/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all books
         * @summary Get all books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorWithMostRentals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books/most-rented-author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a book by its unique ID
         * @summary Get a book by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBookById', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of authors along with the number of books they have authored.
         * @summary Get book counts per author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookCountsPerAuthor: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books/by-author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookWithMostRentals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books/most-rented-book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWithMostRentals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books/most-rentals-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows renting a book if it is available.
         * @summary Rent a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentBook: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentBook', 'id', id)
            const localVarPath = `/api/books/{id}/rent`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves a new book to the database
         * @summary Create a new book
         * @param {CreateBookDTO} createBookDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBook: async (createBookDTO: CreateBookDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBookDTO' is not null or undefined
            assertParamExists('saveBook', 'createBookDTO', createBookDTO)
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a book\'s details
         * @summary Update an existing book
         * @param {number} id 
         * @param {UpdateBookDTO} updateBookDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (id: number, updateBookDTO: UpdateBookDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBook', 'id', id)
            // verify required parameter 'updateBookDTO' is not null or undefined
            assertParamExists('updateBook', 'updateBookDTO', updateBookDTO)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBookDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookManagementApi - functional programming interface
 * @export
 */
export const BookManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes a book from the database
         * @summary Delete a book by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBookById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBookById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.deleteBookById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns all the rentals for a given book.
         * @summary Get all book rentals by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRentalsById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookRentalDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRentalsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.findAllRentalsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a list of books associated with a specific country ID
         * @summary Get books by country ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBooksByCountryId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findBooksByCountryId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.findBooksByCountryId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all books
         * @summary Get all books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBooks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBooks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.getAllBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorWithMostRentals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorWithMostRentals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.getAuthorWithMostRentals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a book by its unique ID
         * @summary Get a book by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.getBookById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of authors along with the number of books they have authored.
         * @summary Get book counts per author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookCountsPerAuthor(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookCountsPerAuthorDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookCountsPerAuthor(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.getBookCountsPerAuthor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookWithMostRentals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookWithMostRentals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.getBookWithMostRentals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWithMostRentals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserWithMostRentals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.getUserWithMostRentals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows renting a book if it is available.
         * @summary Rent a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentBook(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentBook(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.rentBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves a new book to the database
         * @summary Create a new book
         * @param {CreateBookDTO} createBookDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveBook(createBookDTO: CreateBookDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveBook(createBookDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.saveBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a book\'s details
         * @summary Update an existing book
         * @param {number} id 
         * @param {UpdateBookDTO} updateBookDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(id: number, updateBookDTO: UpdateBookDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(id, updateBookDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookManagementApi.updateBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookManagementApi - factory interface
 * @export
 */
export const BookManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookManagementApiFp(configuration)
    return {
        /**
         * Removes a book from the database
         * @summary Delete a book by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBookById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all the rentals for a given book.
         * @summary Get all book rentals by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRentalsById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<BookRentalDTO>> {
            return localVarFp.findAllRentalsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of books associated with a specific country ID
         * @summary Get books by country ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBooksByCountryId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.findBooksByCountryId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all books
         * @summary Get all books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooks(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.getAllBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorWithMostRentals(options?: RawAxiosRequestConfig): AxiosPromise<AuthorDTO> {
            return localVarFp.getAuthorWithMostRentals(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a book by its unique ID
         * @summary Get a book by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.getBookById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of authors along with the number of books they have authored.
         * @summary Get book counts per author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookCountsPerAuthor(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookCountsPerAuthorDTO>> {
            return localVarFp.getBookCountsPerAuthor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookWithMostRentals(options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.getBookWithMostRentals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWithMostRentals(options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.getUserWithMostRentals(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows renting a book if it is available.
         * @summary Rent a book by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentBook(id: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.rentBook(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves a new book to the database
         * @summary Create a new book
         * @param {CreateBookDTO} createBookDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBook(createBookDTO: CreateBookDTO, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.saveBook(createBookDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a book\'s details
         * @summary Update an existing book
         * @param {number} id 
         * @param {UpdateBookDTO} updateBookDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(id: number, updateBookDTO: UpdateBookDTO, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.updateBook(id, updateBookDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookManagementApi - object-oriented interface
 * @export
 * @class BookManagementApi
 * @extends {BaseAPI}
 */
export class BookManagementApi extends BaseAPI {
    /**
     * Removes a book from the database
     * @summary Delete a book by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public deleteBookById(id: number, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).deleteBookById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns all the rentals for a given book.
     * @summary Get all book rentals by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public findAllRentalsById(id: number, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).findAllRentalsById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a list of books associated with a specific country ID
     * @summary Get books by country ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public findBooksByCountryId(id: number, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).findBooksByCountryId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all books
     * @summary Get all books
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public getAllBooks(options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).getAllBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public getAuthorWithMostRentals(options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).getAuthorWithMostRentals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a book by its unique ID
     * @summary Get a book by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public getBookById(id: number, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).getBookById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of authors along with the number of books they have authored.
     * @summary Get book counts per author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public getBookCountsPerAuthor(options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).getBookCountsPerAuthor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public getBookWithMostRentals(options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).getBookWithMostRentals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public getUserWithMostRentals(options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).getUserWithMostRentals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows renting a book if it is available.
     * @summary Rent a book by its ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public rentBook(id: number, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).rentBook(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves a new book to the database
     * @summary Create a new book
     * @param {CreateBookDTO} createBookDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public saveBook(createBookDTO: CreateBookDTO, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).saveBook(createBookDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a book\'s details
     * @summary Update an existing book
     * @param {number} id 
     * @param {UpdateBookDTO} updateBookDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookManagementApi
     */
    public updateBook(id: number, updateBookDTO: UpdateBookDTO, options?: RawAxiosRequestConfig) {
        return BookManagementApiFp(this.configuration).updateBook(id, updateBookDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CountryManagementApi - axios parameter creator
 * @export
 */
export const CountryManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes a country from the database
         * @summary Delete a country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCountryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCountryById', 'id', id)
            const localVarPath = `/api/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all countries
         * @summary Get all countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCountries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a country by its unique ID
         * @summary Get a country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCountryById', 'id', id)
            const localVarPath = `/api/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves a new country to the database
         * @summary Create a new country
         * @param {CreateCountryDTO} createCountryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCountry: async (createCountryDTO: CreateCountryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCountryDTO' is not null or undefined
            assertParamExists('saveCountry', 'createCountryDTO', createCountryDTO)
            const localVarPath = `/api/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCountryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a country\'s details
         * @summary Update an existing country
         * @param {number} id 
         * @param {UpdateCountryDTO} updateCountryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCountry: async (id: number, updateCountryDTO: UpdateCountryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCountry', 'id', id)
            // verify required parameter 'updateCountryDTO' is not null or undefined
            assertParamExists('updateCountry', 'updateCountryDTO', updateCountryDTO)
            const localVarPath = `/api/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCountryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountryManagementApi - functional programming interface
 * @export
 */
export const CountryManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountryManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes a country from the database
         * @summary Delete a country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCountryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCountryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountryManagementApi.deleteCountryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all countries
         * @summary Get all countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCountries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCountries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountryManagementApi.getAllCountries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a country by its unique ID
         * @summary Get a country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountryManagementApi.getCountryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves a new country to the database
         * @summary Create a new country
         * @param {CreateCountryDTO} createCountryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveCountry(createCountryDTO: CreateCountryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveCountry(createCountryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountryManagementApi.saveCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a country\'s details
         * @summary Update an existing country
         * @param {number} id 
         * @param {UpdateCountryDTO} updateCountryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCountry(id: number, updateCountryDTO: UpdateCountryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCountry(id, updateCountryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountryManagementApi.updateCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CountryManagementApi - factory interface
 * @export
 */
export const CountryManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountryManagementApiFp(configuration)
    return {
        /**
         * Removes a country from the database
         * @summary Delete a country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCountryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCountryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all countries
         * @summary Get all countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCountries(options?: RawAxiosRequestConfig): AxiosPromise<Array<CountryDTO>> {
            return localVarFp.getAllCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a country by its unique ID
         * @summary Get a country by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CountryDTO> {
            return localVarFp.getCountryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves a new country to the database
         * @summary Create a new country
         * @param {CreateCountryDTO} createCountryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCountry(createCountryDTO: CreateCountryDTO, options?: RawAxiosRequestConfig): AxiosPromise<CountryDTO> {
            return localVarFp.saveCountry(createCountryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a country\'s details
         * @summary Update an existing country
         * @param {number} id 
         * @param {UpdateCountryDTO} updateCountryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCountry(id: number, updateCountryDTO: UpdateCountryDTO, options?: RawAxiosRequestConfig): AxiosPromise<CountryDTO> {
            return localVarFp.updateCountry(id, updateCountryDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountryManagementApi - object-oriented interface
 * @export
 * @class CountryManagementApi
 * @extends {BaseAPI}
 */
export class CountryManagementApi extends BaseAPI {
    /**
     * Removes a country from the database
     * @summary Delete a country by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryManagementApi
     */
    public deleteCountryById(id: number, options?: RawAxiosRequestConfig) {
        return CountryManagementApiFp(this.configuration).deleteCountryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all countries
     * @summary Get all countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryManagementApi
     */
    public getAllCountries(options?: RawAxiosRequestConfig) {
        return CountryManagementApiFp(this.configuration).getAllCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a country by its unique ID
     * @summary Get a country by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryManagementApi
     */
    public getCountryById(id: number, options?: RawAxiosRequestConfig) {
        return CountryManagementApiFp(this.configuration).getCountryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves a new country to the database
     * @summary Create a new country
     * @param {CreateCountryDTO} createCountryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryManagementApi
     */
    public saveCountry(createCountryDTO: CreateCountryDTO, options?: RawAxiosRequestConfig) {
        return CountryManagementApiFp(this.configuration).saveCountry(createCountryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a country\'s details
     * @summary Update an existing country
     * @param {number} id 
     * @param {UpdateCountryDTO} updateCountryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryManagementApi
     */
    public updateCountry(id: number, updateCountryDTO: UpdateCountryDTO, options?: RawAxiosRequestConfig) {
        return CountryManagementApiFp(this.configuration).updateCountry(id, updateCountryDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserAPIApi - axios parameter creator
 * @export
 */
export const UserAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all users.
         * @summary Fetch all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRentals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/rentals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticates a user and starts a session
         * @summary User login
         * @param {LoginUserDTO} loginUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginUserDTO: LoginUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDTO' is not null or undefined
            assertParamExists('login', 'loginUserDTO', loginUserDTO)
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticates a user and starts a session
         * @summary User login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForm: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/login-form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ends the user\'s session
         * @summary User logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user account
         * @summary Register a new user
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (createUserDTO: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDTO' is not null or undefined
            assertParamExists('register', 'createUserDTO', createUserDTO)
            const localVarPath = `/api/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAPIApi - functional programming interface
 * @export
 */
export const UserAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all users.
         * @summary Fetch all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.fetchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRentals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookRentalDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRentals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.getUserRentals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticates a user and starts a session
         * @summary User login
         * @param {LoginUserDTO} loginUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginUserDTO: LoginUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticates a user and starts a session
         * @summary User login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForm(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForm(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.loginForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ends the user\'s session
         * @summary User logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new user account
         * @summary Register a new user
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(createUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserAPIApi - factory interface
 * @export
 */
export const UserAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAPIApiFp(configuration)
    return {
        /**
         * Retrieves a list of all users.
         * @summary Fetch all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDTO>> {
            return localVarFp.fetchAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRentals(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookRentalDTO>> {
            return localVarFp.getUserRentals(options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticates a user and starts a session
         * @summary User login
         * @param {LoginUserDTO} loginUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginUserDTO: LoginUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDTO> {
            return localVarFp.login(loginUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticates a user and starts a session
         * @summary User login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForm(options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.loginForm(options).then((request) => request(axios, basePath));
        },
        /**
         * Ends the user\'s session
         * @summary User logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user account
         * @summary Register a new user
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.register(createUserDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAPIApi - object-oriented interface
 * @export
 * @class UserAPIApi
 * @extends {BaseAPI}
 */
export class UserAPIApi extends BaseAPI {
    /**
     * Retrieves a list of all users.
     * @summary Fetch all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public fetchAll(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).fetchAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public getUserRentals(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).getUserRentals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticates a user and starts a session
     * @summary User login
     * @param {LoginUserDTO} loginUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public login(loginUserDTO: LoginUserDTO, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).login(loginUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticates a user and starts a session
     * @summary User login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public loginForm(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).loginForm(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ends the user\'s session
     * @summary User logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user account
     * @summary Register a new user
     * @param {CreateUserDTO} createUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public register(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).register(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WishlistAPIApi - axios parameter creator
 * @export
 */
export const WishlistAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a book to the wishlist for the logged-in user
         * @summary Add book to wishlist
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBookToWishlist: async (bookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('addBookToWishlist', 'bookId', bookId)
            const localVarPath = `/api/wishlist/add-book/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes all books from the logged-in user\'s wishlist
         * @summary Clear wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearWishlist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the active wishlist for the logged-in user
         * @summary Get active wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveWishlist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a book from the wishlist for the logged-in user
         * @summary Remove book from wishlist
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBookFromWishlist: async (bookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('removeBookFromWishlist', 'bookId', bookId)
            const localVarPath = `/api/wishlist/remove-book/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rents all books currently in the logged-in user\'s wishlist
         * @summary Rent all books from wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentAllBooksFromWishlist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wishlist/rent-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WishlistAPIApi - functional programming interface
 * @export
 */
export const WishlistAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WishlistAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a book to the wishlist for the logged-in user
         * @summary Add book to wishlist
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBookToWishlist(bookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBookToWishlist(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistAPIApi.addBookToWishlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes all books from the logged-in user\'s wishlist
         * @summary Clear wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearWishlist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearWishlist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistAPIApi.clearWishlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the active wishlist for the logged-in user
         * @summary Get active wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveWishlist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveWishlist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistAPIApi.getActiveWishlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes a book from the wishlist for the logged-in user
         * @summary Remove book from wishlist
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBookFromWishlist(bookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBookFromWishlist(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistAPIApi.removeBookFromWishlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rents all books currently in the logged-in user\'s wishlist
         * @summary Rent all books from wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentAllBooksFromWishlist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookRentalDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentAllBooksFromWishlist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishlistAPIApi.rentAllBooksFromWishlist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WishlistAPIApi - factory interface
 * @export
 */
export const WishlistAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WishlistAPIApiFp(configuration)
    return {
        /**
         * Adds a book to the wishlist for the logged-in user
         * @summary Add book to wishlist
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBookToWishlist(bookId: number, options?: RawAxiosRequestConfig): AxiosPromise<WishlistDTO> {
            return localVarFp.addBookToWishlist(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes all books from the logged-in user\'s wishlist
         * @summary Clear wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearWishlist(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clearWishlist(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the active wishlist for the logged-in user
         * @summary Get active wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveWishlist(options?: RawAxiosRequestConfig): AxiosPromise<WishlistDTO> {
            return localVarFp.getActiveWishlist(options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a book from the wishlist for the logged-in user
         * @summary Remove book from wishlist
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBookFromWishlist(bookId: number, options?: RawAxiosRequestConfig): AxiosPromise<WishlistDTO> {
            return localVarFp.removeBookFromWishlist(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * Rents all books currently in the logged-in user\'s wishlist
         * @summary Rent all books from wishlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentAllBooksFromWishlist(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookRentalDTO>> {
            return localVarFp.rentAllBooksFromWishlist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WishlistAPIApi - object-oriented interface
 * @export
 * @class WishlistAPIApi
 * @extends {BaseAPI}
 */
export class WishlistAPIApi extends BaseAPI {
    /**
     * Adds a book to the wishlist for the logged-in user
     * @summary Add book to wishlist
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistAPIApi
     */
    public addBookToWishlist(bookId: number, options?: RawAxiosRequestConfig) {
        return WishlistAPIApiFp(this.configuration).addBookToWishlist(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes all books from the logged-in user\'s wishlist
     * @summary Clear wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistAPIApi
     */
    public clearWishlist(options?: RawAxiosRequestConfig) {
        return WishlistAPIApiFp(this.configuration).clearWishlist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the active wishlist for the logged-in user
     * @summary Get active wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistAPIApi
     */
    public getActiveWishlist(options?: RawAxiosRequestConfig) {
        return WishlistAPIApiFp(this.configuration).getActiveWishlist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a book from the wishlist for the logged-in user
     * @summary Remove book from wishlist
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistAPIApi
     */
    public removeBookFromWishlist(bookId: number, options?: RawAxiosRequestConfig) {
        return WishlistAPIApiFp(this.configuration).removeBookFromWishlist(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rents all books currently in the logged-in user\'s wishlist
     * @summary Rent all books from wishlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistAPIApi
     */
    public rentAllBooksFromWishlist(options?: RawAxiosRequestConfig) {
        return WishlistAPIApiFp(this.configuration).rentAllBooksFromWishlist(options).then((request) => request(this.axios, this.basePath));
    }
}



